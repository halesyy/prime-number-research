 fittest = float("inf")

   current_T = start_value # 0/1 don't resolve - math domain error
   fittest_T = 0
   
   step_size = 1.00
   direction = 1
   
   steps = 0

   while True:
      steps += 1
      variables = sub_variables(n, tweaking, current_T)
      predicted_result = eval_multivate_safe(ex, variables)

      # Bad result or math domain error.
      if predicted_result is None:
         print(f"Failed to evaluate expression {ex} with variables {variables}")
         current_T += step_size
         steps += 1
         continue
      
      if steps > 10_000 and fittest == 2.00:
         logging.warning(f"Failed to find fittest y for prime {prime} after 100,000 steps.")
         break
      if steps > 20000:
         print(f"Failed to find fittest {tweaking} for prime {prime} after step breaker - likely due to floating point maximisation - completing.")
         break

      fitness_rel = prime - predicted_result
      fitness = abs(fitness_rel)
      print(current_T, fitness_rel, fittest)

      if fitness < fittest:
         fittest = fitness
         fittest_T = current_T
         current_T += step_size * direction
         if (fitness < 0.001 and direction == 1) or fitness == 0:
            break
         elif fitness < 0.00001:
            break
      else:
         # current_y += step_size * direction
         print(f"Current fitness: {fitness} at {current_T}")
         # Too far! We have to move back to fittest_y.
         # Step size moved us too far.
         current_T = fittest_T
         if fitness_rel < 0:
            direction = 1
         else:
            direction = -1
         step_size /= 10
         print(f"Going back to {tweaking}={fittest_T} and inverting direction to {direction * step_size}")
         current_T += step_size * direction
      
      input()
      steps += 1

   if steps > 10_000:
      print(f"Found fittest {tweaking}: {fittest_T} in {steps} steps, fitness: {fittest}, prime: {prime}")
   
   return fittest_T
